#! /bin/sh

. "${srcdir=.}/init.sh"; path_prepend_ $exedir

fail=0
test_name="match"

# basic literal string matches
input="Hello, world"
pattern="Hello"
expected="Hello, world"
match_test "$input" "$pattern" "$expected" "${test_name} 1"

# basic literal string multiline matches
input="Hello,\n world"
pattern="Hello"
expected="Hello,"
match_test "$input" "$pattern" "$expected" "${test_name} 2"

# any character
input="Hello, world"
pattern="."
expected="Hello, world"
match_test "$input" "$pattern" "$expected" "${test_name} 3"

input="Hello,\n1234\n?!"
pattern="."
expected="Hello,\n1234\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 4"

# '\' followed by any char except a digit, '(', or ')' matches that char
input="Hello,\n1234\n?!"
pattern="\H"
expected="Hello,"
match_test "$input" "$pattern" "$expected" "${test_name} 5"

input="Hello,\n1234\n?!"
pattern="\,"
expected="Hello,"
match_test "$input" "$pattern" "$expected" "${test_name} 6"

input="Hello,\n1234\n?!"
pattern="\?"
expected="?!"
match_test "$input" "$pattern" "$expected" "${test_name} 7"

# bracket expressions
input="Hello,\n1234\n?!"
pattern="[H1]"
expected="Hello,\n1234"
match_test "$input" "$pattern" "$expected" "${test_name} 8"

input="Hello,\n1234\n?!"
pattern="[H!]"
expected="Hello,\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 9"

input="Hello,\n1234\n?!"
pattern="[a-z0-9]"
expected="Hello,\n1234"
match_test "$input" "$pattern" "$expected" "${test_name} 10"

input="Hello,\n1234\n?!"
pattern="[0-9]"
expected="1234"
match_test "$input" "$pattern" "$expected" "${test_name} 11"

input="Hello,\n1234\n?!"
pattern="[?!]"
expected="?!"
match_test "$input" "$pattern" "$expected" "${test_name} 12"

input="Hello,\n1234\n?!"
pattern="[A-Z]"
expected="Hello,"
match_test "$input" "$pattern" "$expected" "${test_name} 13"

input="Hello,\n1234\n?!"
pattern="[^0-9]"
expected="Hello,\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 14"

input="Hello,\n1234\n?!"
pattern="[^!-@]"
expected="Hello,"
match_test "$input" "$pattern" "$expected" "${test_name} 15"

input="Hello,\n1234\n?!"
pattern="[^a-zA-Z,]"
expected="1234\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 15"

# '*' matches 0 or more of preceding regex/pattern
input="Hello,\n1234\n?!"
pattern=".*"
expected="Hello,\n1234\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 16"

input="Hello,\n1234\n?!"
pattern="H*"
expected="Hello,\n1234\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 17"

input="Hello,\n1234\n?!"
pattern="[?!]*"
expected="Hello,\n1234\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 18"

input="Hello,\n1234\n?!"
pattern="[0-9]*"
expected="Hello,\n1234\n?!"
match_test "$input" "$pattern" "$expected" "${test_name} 19"

# capturing groups
input="Hello,\n1234\n?!"
pattern="\(Hello,\)"
expected="Hello,"
match_test "$input" "$pattern" "$expected" "${test_name} 20"

input="Hello,\nHello!"
pattern="\(Hello\)[,!]*"
expected="Hello,\nHello!"
match_test "$input" "$pattern" "$expected" "${test_name} 21"

input="test.pdf\ntest.html\ntest2.pdf"
pattern=".*\(\.pdf\)"
expected="test.pdf\ntest2.pdf"
match_test "$input" "$pattern" "$expected" "${test_name} 22"

input="hello1\nhello!\nhello3\nhello10"
pattern="hello\([0-9]*\)"
expected="hello1\nhello!\nhello3\nhello10"
match_test "$input" "$pattern" "$expected" "${test_name} 23"

input="hello1\nhello!\nhello3\nhello10"
pattern="hello\([0-9]\)"
expected="hello1\nhello3\nhello10"
match_test "$input" "$pattern" "$expected" "${test_name} 24"

# numeric backreferences
input="helloh\nhello! hello3 hello10"
pattern="\([a-z]\)ello\1"
expected="helloh"
match_test "$input" "$pattern" "$expected" "${test_name} 25"

input="He said:\n\"She's the one\""
pattern="\(['\"]\).*\1"
expected="\"She's the one\""
match_test "$input" "$pattern" "$expected" "${test_name} 26"

input="He said:\n'She is the one'"
pattern="\(['\"]\).*\1"
expected="'She is the one'"
match_test "$input" "$pattern" "$expected" "${test_name} 27"

# anchor matches
input="Hello, world"
pattern="^world"
expected=""
match_test "$input" "$pattern" "$expected" "${test_name} 4"

exit $fail